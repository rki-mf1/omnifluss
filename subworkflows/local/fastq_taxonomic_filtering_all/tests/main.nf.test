nextflow_workflow {

    name "Test Subworkflow FASTQ_TAXONOMIC_FILTERING_ALL"
    script "../main.nf"
    workflow "FASTQ_TAXONOMIC_FILTERING_ALL"

    //  Add tags for the subworkflow
    tag "subworkflows"
    tag "subworkflows/local"
    tag "subworkflows/fastq_taxonomic_filtering_all"
    tag "fastq_taxonomic_filtering_all"
    // Add tags for all modules used within this subworkflow.
    tag "kraken2_kraken2"
    tag "kraken2_krakentools"

    setup {
        run("UNTAR") {
            script "modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = Channel.of([
                    [],
                    file(
                        params.modules_testdata_base_path + 'genomics/sarscov2/genome/db/kraken2.tar.gz',
                        checkIfExists: true
                    )
                ])
                """
            }
        }
    }

    test("sarscov2 - single_end") {
        config "./fastq.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }

            workflow {
                """
                input[0] = "kraken2"
                input[1] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                ])
                input[2] = UNTAR.out.untar.map{ it[1] }
                input[3] = '2697049'
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()},
                // all input reads are 2697049-reads
                // number of lines in the extracted output file must be the same as the input file
                { assert path(workflow.out.extracted_kraken2_reads[0][1]).linesGzip.size() == 400 }
            )
        }
    }

    test("sarscov2 - paired_end") {
        config "./fastq.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }
            workflow {
                """
                input[0] = "kraken2"
                input[1] =  Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                ])
                input[2] = UNTAR.out.untar.map{ it[1] }
                input[3] = '2697049'
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()},
                // all input reads are 2697049-reads
                // number of lines in the extracted output file must be the same as the input file
                { assert path(workflow.out.extracted_kraken2_reads[0][1][0]).linesGzip.size() == 400 },
                { assert path(workflow.out.extracted_kraken2_reads[0][1][1]).linesGzip.size() == 400 }
            )
        }
    }

    test("sarscov2 - single_end - stub") {

        // Activate the stub mode for nextflow
        options '-stub'

        config "./fastq.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }

            workflow {
                """
                input[0] = "kraken2"
                input[1] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                ])
                input[2] = Channel.value(
                    file("$projectDir/assets/dummy_file.txt", checkIfExists: true)
                )
                input[3] = '2697049'
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("sarscov2 - paired_end - stub") {

        // Activate the stub mode for nextflow
        options '-stub'

        config "./fastq.nextflow.config"

        when {
            params {
                outdir   = "$outputDir"
            }
            workflow {
                """
                input[0] = "kraken2"
                input[1] =  Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                ])
                input[2] = Channel.value(
                    file("$projectDir/assets/dummy_file.txt", checkIfExists: true)
                )
                input[3] = '2697049'
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
