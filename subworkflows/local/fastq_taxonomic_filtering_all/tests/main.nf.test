nextflow_workflow {

    name "Test Subworkflow FASTQ_TAXONOMIC_FILTERING_ALL"
    script "../main.nf"
    // Incude a nextflow.config for the test if needed
    config "subworkflows/local/fastq_taxonomic_filtering_all/tests/nextflow.config"
    workflow "FASTQ_TAXONOMIC_FILTERING_ALL"

    //  Add tags for the subworkflow
    tag "subworkflows"
    tag "subworkflows/local"
    tag "subworkflows/fastq_taxonomic_filtering_all"
    tag "fastq_taxonomic_filtering_all"
    // Add tags for all modules used within this subworkflow.
    tag "kraken2_kraken2"
    tag "kraken2_krakentools"

    // Test name preferably indicating the test-data and file-format used
    test("sarscov2 - single_end - stub") {

        // Activate the stub mode for nextflow
        options '-stub'

        when {
            workflow {
                """
                input[0] = [ [ id:'test', single_end:true ], // meta map
                            [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                        ]
                input[1] = params.kraken2_db
                input[2] = params.kraken2_taxid_filter_list
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("sarscov2 - paired_end - stub") {

        // Activate the stub mode for nextflow
        options '-stub'

        when {
            workflow {
                """
                input[0] = [ [ id:'test', single_end:false ], // meta map
                            [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                        ]
                input[1] = params.kraken2_db
                input[2] = params.kraken2_taxid_filter_list
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}