nextflow_workflow {

    name "Test Subworkflow FASTQ_MAP_ALL"
    script "../main.nf"
    // Incude a nextflow.config for the test if needed
    config "subworkflows/local/fastq_map_all/tests/nextflow.config"
    workflow "FASTQ_MAP_ALL"

    //  Add tags for the subworkflow
    tag "subworkflows"
    tag "subworkflows/local"
    tag "subworkflows/fastq_map_all"
    tag "fastq_map_all"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_align_bwa"
    tag "fastq_align_bwa"
    tag "subworkflows/bam_sort_stats_samtools"
    tag "bam_sort_stats_samtools"
    tag "subworkflows/bam_markduplicates_picard"
    tag "bam_markduplicates_picard"
    tag "subworkflows/bam_stats_samtools"
    tag "bam_stats_samtools"
    // Add tags for all modules used within this subworkflow.
    tag "bwa_mem"
    tag "samtools_sort"
    tag "samtools_index"
    tag "samtools_flagstat"
    tag "samtools_idxstats"
    tag "samtools_stats"
    tag "samtools/faidx"
    tag "picard/markduplicates"

    // Test name preferably indicating the test-data and file-format used
    test("sarscov2 - single_end - stub") {

        // Activate the stub mode for nextflow
        options '-stub'

        when {
            workflow {
                """
                input[0] = 'bwa,picard_remove_duplicates'
                input[1] = Channel.of([
                    [ id:'test', single_end:true ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true) ]
                    ])
                input[2] = Channel.value([
                    [id:'test'], //meta map
                    file("$projectDir/assets/dummy_file.txt", checkIfExists: true)
                ])
                input[3] = Channel.of([
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ])
                input[4] = Channel.of([
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                    ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("sarscov2 - paired_end - stub") {

        // Activate the stub mode for nextflow
        options '-stub'

        when {
            workflow {
                """
                input[0] = 'bwa,picard_remove_duplicates'
                input[1] = Channel.of([
                    [ id:'test', single_end:false ], // meta map
                    [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true) ]
                    ])
                input[2] = Channel.value([
                    [id:'test'], //meta map
                    file("$projectDir/assets/dummy_file.txt", checkIfExists: true)
                ])
                input[3] = Channel.of([
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                    ])
                input[4] = Channel.of([
                    [id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.fai', checkIfExists: true)
                    ])
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
