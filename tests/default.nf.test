nextflow_pipeline {

    name "Test Workflow main.nf"
    script "../main.nf"
    tag "pipeline"
    tag "ena"
    tag "ena_full"
    profile "test_default"


    test("-profile test,INV_illumina") {
        tag "ena"
        tag "influenza"

        setup {
            println "Downloading segment database..."
            def omnifluss_data_url = "https://github.com/rki-mf1/omnifluss_data/raw/INV_illumina/databases/segment_db/ena_segment_db.tar.gz"
            def omnifluss_data_command = ['bash', '-c', "curl -L --retry 5 --retry-delay 10 ${omnifluss_data_url} | tar xzf - -C ${launchDir}"]
            def omnifluss_data_proc = omnifluss_data_command.execute()
            omnifluss_data_proc.waitFor()

            if (omnifluss_data_proc.exitValue() != 0) {
                throw new RuntimeException("Error - failed to download segment db: ${omnifluss_data_proc.err.text}")
            }
        }

        when {
            params {
                input                       = 'https://github.com/rki-mf1/omnifluss_data/raw/INV_illumina/samplesheets/sample_sheet.ENA.csv'
                fastp_adapter_fasta         = 'https://github.com/rki-mf1/omnifluss_data/raw/INV_illumina/NexteraTransposase.fasta'
                reference_selection         = 'kma'
                reference_selection_db      = "${launchDir}/segment_db"
                consensus_mincov            = 5
                skip_taxonomic_filtering    = true
                outdir                      = "$outputDir"
            }
        }

        then {
            // stable_name: All files + folders in ${params.outdir}/ with a stable name
            def stable_name = getAllFilesFromDir(params.outdir, relative: true, includeDir: true, ignore: ['pipeline_info/*.{html,json,txt}'])
            // stable_path: All files in ${params.outdir}/ with stable content
            def stable_path = getAllFilesFromDir(params.outdir, ignoreFile: 'tests/.nftignore')
            assertAll(
                { assert workflow.success},
                { assert snapshot(
                    // Number of successful tasks
                    workflow.trace.succeeded().size(),
                    // pipeline versions.yml file for multiqc from which Nextflow version is removed because we test pipelines on multiple Nextflow versions
                    removeNextflowVersion("$outputDir/pipeline_info/omnifluss_software_mqc_versions.yml"),
                    // All stable path name, with a relative path
                    stable_name,
                    // All files with stable contents
                    stable_path
                ).match() }
            )
        }
    }
}
