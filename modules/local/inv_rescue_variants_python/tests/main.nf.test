nextflow_process {

    name "Test Process INV_RESCUE_VARIANTS_PYTHON"
    script "../main.nf"
    process "INV_RESCUE_VARIANTS_PYTHON"

    tag "modules"
    tag "modules_local"
    tag "inv_rescue_variants_python"

    test("Influenza - vcf - special case") {

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id: 'test.spec_case.filtered' ],
                    [ file(params.local_testdata_base_path + 'INV_illumina/vcf/test.spec_case.filtered.vcf.gz', checkIfExists: true) ]
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out.bed).match("Snapshot-BED") },
                { assert snapshot(process.out.versions).match("Snapshot-VERSIONS") },
                { assert path(process.out.bed[0][1]).readLines().any{ it.contains("var1|B_/_H0N0|HA\t3\t4") } }
            )
        }
    }


    test("Influenza - vcf - special case - stub") {

        tag "stub"
        options '-stub'

        when {
            process {
                """
                input[0] = Channel.of([
                    [ id: 'test.spec_case.filtered' ],
                    [ file(params.local_testdata_base_path + 'INV_illumina/vcf/test.spec_case.filtered.vcf.gz', checkIfExists: true) ]
                ])
                """
            }
        }

        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out.bed).match("Snapshot-BED-stub") },
                { assert snapshot(process.out.versions).match("Snapshot-VERSIONS-stub") },
                { assert path(process.out.bed[0][1]).readLines().size() == 0 }
            )
        }
    }


    test("SARS-CoV-2 - vcf - no special case") {

        when {
            process {
                """
                input[0] =  Channel.of([
                                [ id:'test2' ],
                                [ file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test2.vcf.gz', checkIfExists: true) ]
                            ])
                """
            }
        }

        // the nf-core test data should not contain such a special case
        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out.bed).match() },
                { assert path(process.out.bed[0][1]).readLines().size() == 0 }
            )
        }
    }

}
